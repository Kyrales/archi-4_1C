#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты.ДобавитьТестовыйНабор("Точки интеграции: Функции для модели C4").ВТранзакции()
   	.ДобавитьТест("СформироватьКодДиаграммыИнтеграцииПозитив",,"Позитив")
   	.ДобавитьТест("СформироватьКодДиаграммыБизнесДоменовПозитив", "СформироватьКодДиаграммыБизнесДоменов: на основе документа Архитектурное решение", "Позитив")
   	.ДобавитьТест("СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешенияПозитив", "СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения: на основе документа Архитектурное решение",  "Позитив")
   	.ДобавитьТест("СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешенияНегатив", "СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения: Негативный сценарий при незаполненных строках интеграции в документе Архитектурное решение", "Негатив")
	;

КонецПроцедуры

Процедура СформироватьКодДиаграммыИнтеграцииПозитив() Экспорт
	
	// 1. Подготовка
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники._ДемоОрганизации");
	Интеграция = ОМ_ТочкиИнтеграцииСервер.СоздатьИнтеграцию(Организация, "Тестовая Интеграция");	
	
	// 2. Выполнение функции
	ПараметрыИнтеграции = ТочкиИнтеграцииМоделиС4.ПараметрыДиаграммыИнтеграции();
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Интеграция, "Ссылка, Источник, Приемник");
	ПараметрыИнтеграции.СписокТочекИнтеграции = Интеграция.СписокТочекИнтеграции.Выгрузить();
	
	МассивИнтеграций = Новый Массив;
	МассивИнтеграций.Добавить(ПараметрыИнтеграции);
	
	ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыИнтеграции(МассивИнтеграций);
	
	// 3. Проверка
	ЮТест.ОжидаетЧто(ИсходныйКод)
		.ИмеетТип("Строка")
		.Заполнено()
		.Содержит("Тестовая Интеграция")
		;
		
КонецПроцедуры 

Процедура СформироватьКодДиаграммыБизнесДоменовПозитив() Экспорт

	// 1
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники._ДемоОрганизации");
	АрхитектурноеРешение = ОМ_ТочкиИнтеграцииСервер.СоздатьАрхитектурноеРешение(Перечисления.ДействияПоАрхитектуре.Новая);
	
	// 2
	ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыБизнесДоменов(АрхитектурноеРешение);

	// 3
	ЮТест.ОжидаетЧто(ИсходныйКод)
		.ИмеетТип("Строка")
		.Заполнено() 
		.Содержит("Rel(Источник, Приемник")
		;
		
КонецПроцедуры 

Процедура СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешенияПозитив() Экспорт

	// 1
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники._ДемоОрганизации");
	ДобавитьИнтеграциюВАрхитектурноеРешение = Истина;
	АрхитектурноеРешение = ОМ_ТочкиИнтеграцииСервер.СоздатьАрхитектурноеРешение(Перечисления.ДействияПоАрхитектуре.Новая, ДобавитьИнтеграциюВАрхитектурноеРешение);
	
	// 2
	ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения(АрхитектурноеРешение);

	// 3
	ЮТест.ОжидаетЧто(ИсходныйКод)
		.ИмеетТип("Строка")
		.Заполнено()
		.Содержит("1: Новая - [Источник система]->[Приемник система]: Тестовая интеграция для АР")
		;
		
КонецПроцедуры 

Процедура СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешенияНегатив() Экспорт

	// 1
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники._ДемоОрганизации");
	АрхитектурноеРешение = ОМ_ТочкиИнтеграцииСервер.СоздатьАрхитектурноеРешение(Перечисления.ДействияПоАрхитектуре.Новая);
	
	// 2
	ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения(АрхитектурноеРешение);

	// 3
	ЮТест.ОжидаетЧто(ИсходныйКод)
		.ИмеетТип("Строка")
		.НеЗаполнено() 
		;
		
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти