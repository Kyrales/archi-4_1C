
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты.ДобавитьТестовыйНабор("Точки интеграции: Общие функции").ВТранзакции()
   	.ДобавитьТест("СвязиДоменовПоОрганизацииПозитив",,"Позитив")
   	.ДобавитьТест("СвязиДоменовПоОрганизацииНегатив", "СвязиДоменовПоОрганизацииНегатив: Попытка получения с Перечисления.ДействияПоАрхитектуре.Исключается", "Негатив")
   	.ДобавитьТест("ДоменыОрганизацииПозитив",,"Позитив")
	;

КонецПроцедуры

Процедура СвязиДоменовПоОрганизацииПозитив() Экспорт
	
	// 1. Подготовка
	ДокументАР = СоздатьАрхитектурноеРешение(Перечисления.ДействияПоАрхитектуре.Новая);
	
	// 2. Вызов проверяемой функции
	ТаблицаРезультат = ТочкиИнтеграцииСервер.СвязиДоменовПоОрганизации(ДокументАР.Дата + 1, ДокументАР.Организация);
	
	// 3. Проверка результата
	ЮТест.ОжидаетЧто(ТаблицаРезультат) 
	    .ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1)
		;
	
КонецПроцедуры  

Процедура СвязиДоменовПоОрганизацииНегатив() Экспорт
	
	// 1. Подготовка
	ДокументАР = СоздатьАрхитектурноеРешение(Перечисления.ДействияПоАрхитектуре.Исключается);
	
	// 2. Вызов проверяемой функции
	ТаблицаРезультат = ТочкиИнтеграцииСервер.СвязиДоменовПоОрганизации(ДокументАР.Дата + 1, ДокументАР.Организация);
	
	// 3. Проверка результата
	ЮТест.ОжидаетЧто(ТаблицаРезультат) 
	    .ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(0)
		;
	
КонецПроцедуры 

Процедура ДоменыОрганизацииПозитив() Экспорт

	// 1. Подготовка
	ДокументАР = СоздатьАрхитектурноеРешение(Перечисления.ДействияПоАрхитектуре.Новая);
	
	// 2. Вызов проверяемой функции
	ТаблицаРезультат = ТочкиИнтеграцииСервер.ДоменыОрганизации(ДокументАР.Организация, ДокументАР);
	
	// 3. Проверка результата
	ЮТест.ОжидаетЧто(ТаблицаРезультат) 
	    .ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(2)
		.ЛюбойЭлементСодержитСвойствоСоЗначением("БизнесДомен", ДокументАР.СвязиДоменов[0].Источник)
		.ЛюбойЭлементСодержитСвойствоСоЗначением("БизнесДомен", ДокументАР.СвязиДоменов[0].Приемник)
		;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СоздатьИнформационнуюСистему(Организация, Наименование) Экспорт

	КонструкторИнформационаяСистема = ЮТест.Данные().КонструкторОбъекта("Справочники.ИнформационныеСистемы")
		.ФикцияОбязательныхПолей()
		.Установить("Организация", Организация)
		.Установить("КраткоеНаименование", Наименование)
		;	
		
	ИнформационаяСистема = КонструкторИнформационаяСистема.Записать();
	
	Возврат ИнформационаяСистема;

КонецФункции

Функция СоздатьАрхитектурноеРешение(Действия, ДобавитьИнтеграциюВАрхитектурноеРешение = Ложь) Экспорт
	
	ДатаДокумента = ТекущаяДатаСеанса();
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники._ДемоОрганизации");
	Источник = СоздатьБизнесДомен(Организация, "Источник");		
	Приемник = СоздатьБизнесДомен(Организация, "Приемник");		
	
	КонструкторАрхитектурноеРешение = ЮТест.Данные().КонструкторОбъекта("Документы.АрхитектурноеРешение")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Проблема, Решение")
		.Установить("Дата", ДатаДокумента)
		.Установить("Организация", Организация)
		.Установить("Название", "TEST_Тестовое решение")
		.Установить("Статус", Перечисления.СтатусАрхитектурногоРешения.Предложен)
		.ТабличнаяЧасть("СвязиДоменов").ДобавитьСтроку()
			.Установить("Источник", Источник)
			.Установить("Приемник", Приемник)
			.Установить("Действия", Действия)
		;
		
	Если ДобавитьИнтеграциюВАрхитектурноеРешение Тогда
		Интеграция = СоздатьИнтеграцию(Организация, "Тестовая интеграция для АР");
		КонструкторАрхитектурноеРешение
			.ТабличнаяЧасть("Интеграции").ДобавитьСтроку()
				.Установить("Интеграция", Интеграция)
				.Установить("Действия", Действия)
			;
	КонецЕсли;	
	
	ДокументАР = КонструкторАрхитектурноеРешение.Провести();
	
	Возврат ДокументАР;

КонецФункции

Функция СоздатьИнтеграцию(Организация, Наименование) Экспорт
	
	Источник = ОМ_ТочкиИнтеграцииСервер.СоздатьИнформационнуюСистему(Организация, "Источник система");
	Приемник = ОМ_ТочкиИнтеграцииСервер.СоздатьИнформационнуюСистему(Организация, "Приемник система");
	ТочкаИнтеграции = СоздатьТочкуИнтеграции("Тест точка интеграции", Приемник);
	
	КонструкторИнтеграция = ЮТест.Данные().КонструкторОбъекта("Справочники.Интеграции")
		.ФикцияОбязательныхПолей()
		.Установить("КраткоеНаименование", Наименование)
		.Установить("Источник", Источник)
		.Установить("Приемник", Приемник)
		.Установить("СтатусИнтеграции", Перечисления.СтатусыИнтеграции.Работает)
		.ТабличнаяЧасть("СписокТочекИнтеграции").ДобавитьСтроку()
			.ФикцияРеквизитов("НаправлениеПотокаДанных, МетодВызова")
			.Установить("ИнициаторОбмена", Источник)
			.Установить("ТочкаИнтеграции", ТочкаИнтеграции)
		;	
	Интеграция = КонструкторИнтеграция.Записать();

	Возврат Интеграция;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьТочкуИнтеграции(Наименование, ИнформационнаяСистемаТИ)
	
	КонструкторТочкаИнтеграции = ЮТест.Данные().КонструкторОбъекта("Справочники.ТочкиИнтеграции")
   		.ФикцияОбязательныхПолей()
		.Установить("КраткоеНаименование", Наименование)
		.Установить("ИнформационнаяСистемаТИ", ИнформационнаяСистемаТИ)
		.Установить("ТипИнтеграции", Перечисления.ТипИнтеграции.HTTPService)
		;
		
   	ТочкаИнтеграции = КонструкторТочкаИнтеграции.Записать();

	Возврат ТочкаИнтеграции;

КонецФункции

Функция СоздатьБизнесДомен(Организация, Наименование)
	
	ИнформационаяСистема = СоздатьИнформационнуюСистему(Организация, "Тестовая система");
		
	КонструкторБизнесДомен = ЮТест.Данные().КонструкторОбъекта("Справочники.БизнесДомены")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", Наименование)
		.Установить("Владелец", ИнформационаяСистема);
	
	Возврат КонструкторБизнесДомен.Записать();;

КонецФункции

#КонецОбласти