#Область ПрограммныйИнтерфейс

// Функция выделяет первое слово в предложении
//
// Параметры:
//  ИсходнаяСтрока	 - Строка	 
//  Разделитель		 - Строка	 - по-умолчанию разделитель " "
// 
// Возвращаемое значение:
//  Строка - выделенное слово
//
Функция ВыделитьСлово(ИсходнаяСтрока, Разделитель = " ") Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = СтрНайти(Буфер, Разделитель);

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	ВыделенноеСлово = СтрЗаменить(ВыделенноеСлово, Разделитель, "");
	
	Возврат ВыделенноеСлово;
	
КонецФункции

// Присоединяет одну строку к другой.
//
// Параметры:
//  ОсновнаяСтрока			 - Строка - строка, к который присоединяется другая строка.
//  ПрисоединяемаяСтрока	 - Строка 
//  ПрисоединятьПустуюСтроку - Булево - Ложь - строка будет добавлена только в том случае, если она не пустая, Истина - строка будет добавлена всегда.
// 
Процедура ПрисоединитьСтроку(ОсновнаяСтрока, ПрисоединяемаяСтрока, РазделительСтрок = Неопределено, ПрисоединятьПустуюСтроку = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ПрисоединяемаяСтрока)
		И Не ПрисоединятьПустуюСтроку Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РазделительСтрок = Неопределено Тогда
		
		РазделительСтрок = Символы.ПС;
		
	КонецЕсли;
	
	Если ТипЗнч(ОсновнаяСтрока) <> Тип("Строка") Тогда
		// "Неопределено" и т.п.
		
		ОсновнаяСтрока = "";
		
	ИначеЕсли ЗначениеЗаполнено(ОсновнаяСтрока) Тогда
		
		ОсновнаяСтрока = ОсновнаяСтрока + РазделительСтрок;
		
	КонецЕсли;
	
	ОсновнаяСтрока = ОсновнаяСтрока + ПрисоединяемаяСтрока;
	
КонецПроцедуры

// Процедура устанавливает реквизит, в случае если отличиается от текущего, с возвратом флага изменения
Процедура УстановитьРеквизит(Объект, ИмяРеквизита, НовоеЗначение, ФлагИзменения = Ложь, ИзменятьЗаполненный = Ложь) Экспорт
	
	Если Объект[ИмяРеквизита] <> НовоеЗначение Тогда
		
		Если ИзменятьЗаполненный
			Или Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			
			Объект[ИмяРеквизита] = НовоеЗначение;
			ФлагИзменения = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура сравнивает реквизит, в случае если отличается от текущего, то фиксирует флаг изменения
Процедура СравнитьРеквизит(Объект, ИмяРеквизита, НовоеЗначение, ФлагИзменения = Ложь) Экспорт
	
	Если Объект[ИмяРеквизита] <> НовоеЗначение Тогда
		
		ФлагИзменения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Подписка на событие. Переопределяет форму выбора для объектов, которые используют форму списка для выбора.
// Источник: МодульМенеджера.ОбработкаПолученияФормы
// См. примеры: Справочник "Сертификаты", "Рабочие места"
//
Процедура ПереопределитьФормуВыбораКупоросОбработкаПолученияФормы(Источник, ВидФормы, Параметры, 
		ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСписка";
		Параметры.Вставить("РежимВыбора", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет значение идентификатора из строки соответствии с правилами именования переменных.
// 
// Параметры:
//  СтрокаПредставления - Строка - наименование, строка из которой необходимо получить идентификатор. 
//	Исключения - Строка - исключения, которые не нужно убирать из строки представления (через запятую). Например: (,)
//
// Возвращаемое значение:
//  Строка - идентификатор, соответствующий правилам именования идентификаторов.
//
Функция ИдентификаторДляФормул(СтрокаПредставления, Исключения = "") Экспорт
	
	СпецСимволы = СпецСимволы();
	
	// Убрать спец.символы, которые указаны в исключениях.
	СписокИсключений = СтрРазделить(Исключения, ",", Истина);
	Для каждого ТекИсключение Из СписокИсключений Цикл
		СпецСимволы = СтрЗаменить(СпецСимволы, ТекИсключение, "");		
	КонецЦикла;
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для НомСимвола = 1 По СтрДлина(СтрокаПредставления) Цикл
		
		Символ = Сред(СтрокаПредставления, НомСимвола, 1);
		
		Если СтрНайти(СпецСимволы, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
			Если Символ = "_" Тогда
				Идентификатор = Идентификатор + Символ;
			КонецЕсли;
		ИначеЕсли БылСпецСимвол
			ИЛИ НомСимвола = 1 Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти     

#Область СлужебныеПроцедурыИФункции

Функция СпецСимволы()
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин, Макс", 0, 32));
	Диапазоны.Добавить(Новый Структура("Мин, Макс", 127, 191));
	
	СпецСимволы = " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Для Каждого Диапазон Из Диапазоны Цикл
		Для КодСимвола = Диапазон.Мин По Диапазон.Макс Цикл
			СпецСимволы = СпецСимволы + Символ(КодСимвола);
		КонецЦикла;
	КонецЦикла;
	Возврат СпецСимволы;
КонецФункции

#КонецОбласти
