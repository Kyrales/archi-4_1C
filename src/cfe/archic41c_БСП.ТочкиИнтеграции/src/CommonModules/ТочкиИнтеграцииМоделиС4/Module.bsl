#Область ПрограммныйИнтерфейс

// Функция возвращает исходный код диаграммы по спр. Интеграции в нотации C4
//  Вся информация по C4: https://github.com/plantuml-stdlib/C4-PlantUML
//
// Параметры:
//	* МассивИнтеграций - Массив Из Структур:
//  	** Ссылка   - СправочникСсылка.Интеграции
//  	** Источник - СправочникСсылка.ИнформационныеСистемы
//  	** Приемник - СправочникСсылка.ИнформационныеСистемы
//  	** СписокТочекИнтеграции - ТаблицаЗначений - см. табличная часть СправочникСсылка.ИнформационныеСистемы.СписокТочекИнтеграции
//		** ДействияПоАР - ПеречислениеСсылка.ДействияПоАрхитектуре - действие с интеграцией, при формировании схемы из документа Архитектурное решение
//		** ОписаниеИзмененияПоАР - Строка - описание изменения интеграции в АР, при формировании схемы из документа Архитектурное решение
//
// Возвращаемое значение:
//  Строка - исходный код в нотации C4 (до уровня 2: Контейнеры)
//
Функция СформироватьКодДиаграммыИнтеграции(МассивИнтеграций) Экспорт
	
	Если Не ЗначениеЗаполнено(МассивИнтеграций) Тогда
		Возврат "";	
	КонецЕсли;
	
	Контейнеры = Новый Соответствие;
	
	ЕстьВнешнийСервисИсточникИлиПриемника = Ложь;
	Для Каждого ПараметрыИнтеграции Из МассивИнтеграций Цикл
		
		Источник = ПараметрыИнтеграции.Источник;
		Приемник = ПараметрыИнтеграции.Приемник;
		СписокТочекИнтеграции = ПараметрыИнтеграции.СписокТочекИнтеграции;
		
		КонтейнерыНовые = СформироватьСоответствияКонтейнеровИС(Источник, Приемник, СписокТочекИнтеграции);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Контейнеры, КонтейнерыНовые, Истина);
		
		Если НЕ ЕстьВнешнийСервисИсточникИлиПриемника Тогда
			ИсточникЭтоВнешнийСервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "АрхитектураРаботы") = Перечисления.АрхитектурыРаботыИС.ВнешнийСервис;
			ПриемникЭтоВнешнийСервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приемник, "АрхитектураРаботы") = Перечисления.АрхитектурыРаботыИС.ВнешнийСервис;
			
			ЕстьВнешнийСервисИсточникИлиПриемника = ИсточникЭтоВнешнийСервис ИЛИ ПриемникЭтоВнешнийСервис;
		КонецЕсли;
		
	КонецЦикла;
	
	// - Заполнение исходного кода параметров блоков.
	
	БазовыйКод = ШаблонБазовогоИсходногоКода();
	
	// Заполнение исходного кода блоков с системами и контейнерами.
	ПараметрыДляИсходногоКодаБлока = Новый Структура;
	ПараметрыДляИсходногоКодаБлока.Вставить("ПриемникЭтоВнешнийСервис", ПриемникЭтоВнешнийСервис);
	ПараметрыДляИсходногоКодаБлока.Вставить("ЕстьВнешнийСервисИсточникИлиПриемника", ЕстьВнешнийСервисИсточникИлиПриемника);
	ПараметрыДляИсходногоКодаБлока.Вставить("ОднаИнтеграцияНаДиаграмме", МассивИнтеграций.Количество() = 1);
	ПараметрыДляИсходногоКодаБлока.Вставить("МассивИнтеграций", МассивИнтеграций);
	ИсходныйКодБлоков = ЗаполнениеИсходногоКодаБлоков(Контейнеры, ПараметрыДляИсходногоКодаБлока);
	
	// Заполнение исходного кода связей блоков.
	ИсходныйКодСоединений = ЗаполнениеИсходногоКодаСвязейБлоков(Контейнеры, МассивИнтеграций, БазовыйКод);
	
	// - Формирование результата исходного кода.
	ИсходныйКод = СтрШаблон(НСтр("ru = '%1
				|
				|%2'"), ИсходныйКодБлоков, ИсходныйКодСоединений);
	
	// Пользователи системы выводим, если только одна интеграция (чтобы не запутывать).
	СтрокаПользователиСистемы = "";
	КонтейнерПриемника = Контейнеры.Получить(Приемник);
	Если МассивИнтеграций.Количество() = 1 Тогда
		СтрокаПользователиСистемы = СтрШаблон(НСтр("ru = 'Rel_L(user, %1, ""uses"", $tags=""uses"") '"), КонтейнерПриемника.Параметр1);
	Иначе
		ИсходныйКод = СтрЗаменить(ИсходныйКод, НСтр("ru = 'Person(user, ""User"", ""People that need products"", $sprite=""users"")'"), "");
	КонецЕсли;
	
	// Соединение с базовым шаблоном.
	ИсходныйКодИтоговый = СтрШаблон(БазовыйКод,
	        "Архитектура программных систем и интеграций", // Заголовок диаграммы
			ИсходныйКод, 
			СтрокаПользователиСистемы, 
			КонтейнерПриемника.Параметр1,
	        Строка(Новый УникальныйИдентификатор));
	
	Возврат ИсходныйКодИтоговый;
	
КонецФункции

// Функция возвращает код диаграммы бизнес доменов (Модель функций и потоков данных бизнес-доменов)
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.АрхитектурноеРешение 
// 
// Возвращаемое значение:
//  Строка - исходный код в нотации C4 (до уровня 2: Контейнеры)
//
Функция СформироватьКодДиаграммыБизнесДоменов(СсылкаНаДокумент) Экспорт
	
	ДоменыОрганизации = ТочкиИнтеграцииСервер.ДоменыОрганизации(СсылкаНаДокумент.Организация, СсылкаНаДокумент);
	
	Если ДоменыОрганизации.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИсходныйКод = "";
	ИдентификаторОсновнойСистемы = "";
	
	// Формирование базового кода по шаблону.
	БазовыйКод = ШаблонБазовогоИсходногоКода();
	
	// Заполнение систем и контейнеров (бизнес-доменов).
	
	СистемыСДоменами = СформироватьСоответствияДоменовИС(ДоменыОрганизации);
	
	Если СистемыСДоменами.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого ТекСистема Из СистемыСДоменами Цикл
		
		КодПоСистеме = ЗаполнениеБлокаСистемыСБизнесДоменами(ТекСистема.Ключ, ТекСистема.Значение);
		
		ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(ИсходныйКод, КодПоСистеме, Символы.ПС);
		
		Если ТекСистема.Значение.ЭтоОсновнаяСистема Тогда
			ИдентификаторОсновнойСистемы = "sys" + ТИ_ОбщегоНазначенияКлиентСервер.ИдентификаторДляФормул(ТекСистема.Ключ.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение исходного кода связей блоков.
	КодСвязей = ЗаполнениеКодаСвязейДоменов(СсылкаНаДокумент);	
	
	// Соединение с базовым шаблоном.
	ИсходныйКодИтоговый = СтрШаблон(БазовыйКод,
			"Модель функций и потоков данных бизнес-доменов",   // Заголовок
			ИсходныйКод, 
			КодСвязей, 
			ИдентификаторОсновнойСистемы,
		    Строка(Новый УникальныйИдентификатор));
	
	Возврат ИсходныйКодИтоговый;
	
КонецФункции

// Функция возвращает код диаграммы интеграции по архитектуре решения
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.АрхитектурноеРешение 
// 
// Возвращаемое значение:
//  Строка - исходный код в нотации C4 (до уровня 2: Контейнеры)
//
Функция СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения(СсылкаНаДокумент) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АрхитектурноеРешениеИнтеграции.Ссылка КАК Ссылка,
	               |	АрхитектурноеРешениеИнтеграции.Интеграция КАК Интеграция,
	               |	АрхитектурноеРешениеИнтеграции.Действия КАК ДействияПоАР,
	               |	АрхитектурноеРешениеИнтеграции.ОписаниеИзменения КАК ОписаниеИзмененияПоАР,
	               |	АрхитектурноеРешениеИнтеграции.Интеграция.Источник КАК Источник,
	               |	АрхитектурноеРешениеИнтеграции.Интеграция.Приемник КАК Приемник
	               |ИЗ
	               |	Документ.АрхитектурноеРешение.Интеграции КАК АрхитектурноеРешениеИнтеграции
	               |ГДЕ
	               |	АрхитектурноеРешениеИнтеграции.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивИнтеграций = Новый Массив;
	Пока Выборка.Следующий() Цикл
	
		ПараметрыИнтеграции = ПараметрыДиаграммыИнтеграции();
		ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Выборка, "Источник, Приемник, ДействияПоАР, ОписаниеИзмененияПоАР");
		ПараметрыИнтеграции.Ссылка = Выборка.Интеграция;	
		
		СписокТочекИнтеграции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Интеграция, "СписокТочекИнтеграции").Выгрузить();
		ПараметрыИнтеграции.СписокТочекИнтеграции = СписокТочекИнтеграции;
		
		МассивИнтеграций.Добавить(ПараметрыИнтеграции);
		
	КонецЦикла;
	
	ИсходныйКод = СформироватьКодДиаграммыИнтеграции(МассивИнтеграций);
	
	Возврат ИсходныйКод;
	
КонецФункции

// Параметры диаграммы интеграции
// 
// Возвращаемое значение:
//  Структура - см. СформироватьКодДиаграммыИнтеграции()
//
Функция ПараметрыДиаграммыИнтеграции() Экспорт

	ПараметрыИнтеграции = Новый Структура;
	ПараметрыИнтеграции.Вставить("Ссылка", Справочники.Интеграции.ПустаяСсылка());
	ПараметрыИнтеграции.Вставить("Источник", Справочники.ИнформационныеСистемы.ПустаяСсылка());
	ПараметрыИнтеграции.Вставить("Приемник", Справочники.ИнформационныеСистемы.ПустаяСсылка());
	ПараметрыИнтеграции.Вставить("СписокТочекИнтеграции", Справочники.Интеграции.СоздатьЭлемент().СписокТочекИнтеграции.Выгрузить());
	ПараметрыИнтеграции.Вставить("ДействияПоАР", Перечисления.ДействияПоАрхитектуре.ПустаяСсылка());
	ПараметрыИнтеграции.Вставить("ОписаниеИзмененияПоАР", "");
	
	Возврат ПараметрыИнтеграции;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонБазовогоИсходногоКода(ЛинииБезСкруглений = Ложь)
	
	// Ссылка по описанию: https://github.com/plantuml-stdlib/C4-PlantUML
	
	ИсходныйКод = НСтр("ru = '@startuml
                        |!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
                        |
                        |!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/main/icons/devicons
                        |!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/main/icons/font-awesome-5
                        |!define FONTAWESOME6 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/main/icons/font-awesome-6
                        |!include DEVICONS/streamline.puml
                        |!include DEVICONS/java.puml
                        |!include DEVICONS/msql_server.puml
                        |!include DEVICONS/prolog.puml
                        |!include DEVICONS/aptana.puml
                        |!include DEVICONS/android.puml
                        |!include DEVICONS/smashing_magazine.puml
                        |!include DEVICONS/terminal.puml
                        |!include DEVICONS/scala.puml
                        |!include DEVICONS/ie.puml
                        |!include FONTAWESOME/users.puml
                        |!include FONTAWESOME6/d.puml
                        |!include <office/Servers/database_server>
                        |!include <office/Servers/file_server>
                        |!include <office/Servers/application_server>
                        |!include <office/Concepts/service_application>
                        |!include <office/Concepts/firewall>
                        |
                        |'' линии без скруглений два варианта
                        |'' skinparam Linetype ortho
                        |'' skinparam Linetype polyline
                        |
                        |AddElementTag(""Введен в эксплуатацию"", $bgColor=""#339933"")
                        |AddElementTag(""Запланирован"", $bgColor=""#FFD700"")
                        |AddElementTag(""В процессе запуска"", $bgColor=""#ff8c69"")
                        |AddElementTag(""Изменения бизнес-домена"", $bgColor=""#FF0033"")
                        |AddRelTag(""Изменение связей бизнес-доменов"", $textColor=""#FF0033"", $lineColor=""#FF0033"", $lineStyle = BoldLine())
                        |
                        |AddRelTag(""ext"", $textColor=""red"", $lineColor=""red"", $sprite=""firewall,scale=0.3,color=red"")
                        |AddRelTag(""uses"", $textColor=""orange"", $lineColor=""orange"")
                        |
                        |'' #ЗаполнениеТеговСвязей#
                        |
                        |title
                        | <b>%1</b>
                        |end title 
                        |
                        |%2
                        |
                        |%3
                        |
                        |SHOW_FLOATING_LEGEND()
                        |Lay_Distance(LEGEND(), %4, 1)
                        |'' Уникальный идентификатор схемы: %5                        
                        |@enduml'");
	
	Если ЛинииБезСкруглений Тогда
		ИсходныйКод = СтрЗаменить(ИсходныйКод, НСтр("ru = ''' skinparam Linetype ortho'"), НСтр("ru = 'skinparam Linetype ortho'"));
	КонецЕсли;
	
	Возврат ИсходныйКод;
	
КонецФункции

Функция ПараметрыСистемыДляДиаграммы()
	
	Параметры = Новый Структура;
	// Тип СсылкаНаОбъект: Неопределено, СправочникСсылка.ИнформационныеСистемы, СправочникСсылка.РесурсыИнформационныхСистем, СправочникСсылка.БизнесДомены 
	Параметры.Вставить("СсылкаНаОбъект", Неопределено);  
	Параметры.Вставить("ЭтоИсточник", Ложь);
	Параметры.Вставить("ЭтоПриемник", Ложь);
	Параметры.Вставить("ЭтоВнешнийСервис", Ложь);
	Параметры.Вставить("Параметр1", ""); // Переменная для C4
	Параметры.Вставить("Параметр2", ""); // Наименование для вывода
	Параметры.Вставить("Параметр3", Перечисления.АрхитектурыРаботыИС.ПустаяСсылка());  // Архитектура
	Параметры.Вставить("Параметр4", "");  // Картинка для контейнера
	Параметры.Вставить("ИмяПроцедуры", "");
	Параметры.Вставить("Параметр6", "");  // Сервер ресурсов
	Параметры.Вставить("ИнформационнаяСистемаРесурса", Справочники.ИнформационныеСистемы.ПустаяСсылка());
	Параметры.Вставить("ЭтоРесурс", Ложь);
	Параметры.Вставить("ЭтоБизнесДомен", Ложь);
	Параметры.Вставить("ТегИзменения", ""); // При наличии факта изменения подставляется: ,$tags="Изменения бизнес-домена"
	
	Возврат Параметры;
	
КонецФункции

Функция ДополнительныеПараметрыДляЗаполненияИС()

	Параметры = Новый Структура;
	Параметры.Вставить("ЭтоРесурс", Ложь);
	Параметры.Вставить("РесурсСистемы", Справочники.РесурсыИнформационныхСистем.ПустаяСсылка());
	Параметры.Вставить("ЭтоБизнесДомен", Ложь);
	Параметры.Вставить("БизнесДомен", Справочники.БизнесДомены.ПустаяСсылка());
	Параметры.Вставить("КонтейнерИзменен", Ложь);
	Параметры.Вставить("ОписаниеИзменения", "");
	
	Возврат Параметры;

КонецФункции

// Возвращает готовые для заполнения параметры системы
//
// Параметры:
//  ИнформационнаяСистема	 - СправочникСсылка.ИнформационныеСистемы
//	ДополнительныеПараметры - Структура - содержит свойства:
//		* ЭтоРесурс - Булево
//		* РесурсСистемы - СправочникСсылка.РесурсыИнформационныхСистем
//		* ЭтоБизнесДомен - Булево
//		* БизнесДомен - СправочникСсылка.БизнесДомены
//		* КонтейнерИзменен - Булево - Истина, в случае если требуется отметка об измененении
//		* ОписаниеИзменения - Строка - Выводится для описания домена в Параметр6, в случае если ЭтоБизнесДомен = Истина
//
// Возвращаемое значение:
//   Структура - см. ПараметрыСистемыДляДиаграммы()
//
Функция ЗаполнитьПараметрыИСДляДиаграммы(ИнформационнаяСистема, ДополнительныеПараметры = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ВходящиеПараметры = ДополнительныеПараметрыДляЗаполненияИС();
	Иначе
		ВходящиеПараметры = ДополнительныеПараметры;	
	КонецЕсли;
	
	НаименованиеДляВывода = "";
	Если ВходящиеПараметры.ЭтоРесурс Тогда
		СсылкаНаОбъект = ВходящиеПараметры.РесурсСистемы;
		НаименованиеДляВывода = СсылкаНаОбъект.Наименование;
		АрхитектураРаботы = СсылкаНаОбъект.АрхитектураРаботы;
	ИначеЕсли ВходящиеПараметры.ЭтоБизнесДомен  Тогда
		НаименованиеДляВывода = ДополнительныеПараметры.БизнесДомен.Наименование;
		АрхитектураРаботы = Перечисления.АрхитектурыРаботыИС.БизнесДомен;
	Иначе
		СсылкаНаОбъект = ИнформационнаяСистема;
		НаименованиеДляВывода = СсылкаНаОбъект.КраткоеНаименование;
		АрхитектураРаботы = СсылкаНаОбъект.АрхитектураРаботы;
	КонецЕсли;
	
	
	// Заполнение параметров для вывода в диаграмме.
	Параметры = ПараметрыСистемыДляДиаграммы();
	
	Параметры.СсылкаНаОбъект = СсылкаНаОбъект;
	Параметры.ЭтоВнешнийСервис = АрхитектураРаботы = Перечисления.АрхитектурыРаботыИС.ВнешнийСервис;
	Параметры.Параметр1 = ТИ_ОбщегоНазначенияКлиентСервер.ИдентификаторДляФормул(НаименованиеДляВывода); // Переменная для C4. Ранее: СсылкаНаОбъект.Код;
	Параметры.Параметр2 = НаименованиеДляВывода;
	Параметры.Параметр3 = АрхитектураРаботы;
	
	// Определение сервера ресурса для Параметр6.
	Если ВходящиеПараметры.ЭтоРесурс Тогда
		Параметры.ИнформационнаяСистемаРесурса = ИнформационнаяСистема;
		Параметры.Параметр6 = Строка(СсылкаНаОбъект.СерверРесурсов);
		Параметры.ЭтоРесурс = Истина;
	ИначеЕсли ВходящиеПараметры.ЭтоБизнесДомен Тогда
		Параметры.ЭтоБизнесДомен = Истина;
		ОписаниеИзменения = ?(ЗначениеЗаполнено(ДополнительныеПараметры.ОписаниеИзменения), "Изменяется: " + ДополнительныеПараметры.ОписаниеИзменения, "");	
		Параметры.Параметр6 = ОписаниеИзменения;
		// Установка тега изменения.
		Если ВходящиеПараметры.КонтейнерИзменен Тогда
			Параметры.ТегИзменения = НСтр("ru = ',$tags=""Изменения бизнес-домена""'");		
		ИначеЕсли ДополнительныеПараметры.БизнесДомен.СтатусЗапуска = Перечисления.СтатусБизнесДомена.Запланировано Тогда	
			Параметры.ТегИзменения = НСтр("ru = ',$tags=""Запланирован""'");		
		ИначеЕсли ДополнительныеПараметры.БизнесДомен.СтатусЗапуска = Перечисления.СтатусБизнесДомена.Готово Тогда	
			Параметры.ТегИзменения = НСтр("ru = ',$tags=""Введен в эксплуатацию""'");		
		ИначеЕсли ДополнительныеПараметры.БизнесДомен.СтатусЗапуска = Перечисления.СтатусБизнесДомена.ВРаботе Тогда	
			Параметры.ТегИзменения = НСтр("ru = ',$tags=""В процессе запуска""'");		
		Иначе
			Параметры.ТегИзменения = "";	
		КонецЕсли;
		
	Иначе
		// вывод самой информационной системы
		РеквизитыОсновногоРесурсаИС = ОсновнойРесурсИнформационнойСистемы(СсылкаНаОбъект);
		Параметры.Параметр6 = Строка(РеквизитыОсновногоРесурсаИС.СерверРесурсов);
	КонецЕсли;
	
	// Определение типа выводимой картинки контейнера для Параметр4 и ИмяПроцедуры.
	// Картинки для параметра4 devicons можно взять отсюда: https://github.com/tupadr3/plantuml-icon-font-sprites/tree/main
	ИмяПроцедуры = "Container";
	Параметр4 = "smashing_magazine";
	
	СоответствиеТипаКонтейнера = СоответствиеТипаКонтейнераДляДиаграммыПоУмолчанию();
	ЗначениеТипаКонтейнера = СоответствиеТипаКонтейнера.Получить(АрхитектураРаботы);
	Если ЗначениеТипаКонтейнера <> Неопределено Тогда
		
		Параметр4 = ЗначениеТипаКонтейнера.Параметр4;
		ИмяПроцедуры = ЗначениеТипаКонтейнера.ИмяПроцедуры;
		
	КонецЕсли;
	
	Параметры.Параметр4 = Параметр4;
	Параметры.ИмяПроцедуры = ИмяПроцедуры;
	
	Возврат Параметры;
	
КонецФункции

Функция ЗаполнениеБлокаОдногоКонтейнера(ЗначениеДляЗаполнения)
	
	КодБлокаДляДиаграммы = СтрШаблон(НСтр("ru = '
				|%5(%1, ""%2"", ""%3"", ""%6"", $sprite=""%4""%7) '"),
			ЗначениеДляЗаполнения.Параметр1,
			ЗначениеДляЗаполнения.Параметр2,
			ЗначениеДляЗаполнения.Параметр3,
			ЗначениеДляЗаполнения.Параметр4,
			ЗначениеДляЗаполнения.ИмяПроцедуры, // 5
			ЗначениеДляЗаполнения.Параметр6,
			ЗначениеДляЗаполнения.ТегИзменения);
	
	Возврат КодБлокаДляДиаграммы;
	
КонецФункции

#Область ВспомогательныеФункцииДляГенерацииКодаИнтеграций

Функция СформироватьСоответствияКонтейнеровИС(Источник, Приемник, СписокТочекИнтеграции)
	
	Контейнеры = Новый Соответствие;
	
	// источник
	ПараметрыИнформационнойСистемы = ЗаполнитьПараметрыИСДляДиаграммы(Источник);
	ПараметрыИнформационнойСистемы.ЭтоИсточник = Истина;
	Контейнеры.Вставить(Источник, ПараметрыИнформационнойСистемы);
	
	// приемник
	ПараметрыИнформационнойСистемы = ЗаполнитьПараметрыИСДляДиаграммы(Приемник);
	ПараметрыИнформационнойСистемы.ЭтоПриемник = Истина;
	Контейнеры.Вставить(Приемник, ПараметрыИнформационнойСистемы);
	
	Для Каждого ТекТочкаИнтеграции Из СписокТочекИнтеграции Цикл
		
		Если Контейнеры.Получить(ТекТочкаИнтеграции.ИнициаторОбмена) = Неопределено Тогда
			
			ПараметрыИнформационнойСистемы = ЗаполнитьПараметрыИСДляДиаграммы(ТекТочкаИнтеграции.ИнициаторОбмена);
			Контейнеры.Вставить(ТекТочкаИнтеграции.ИнициаторОбмена, ПараметрыИнформационнойСистемы);
			
		КонецЕсли;
		
		РеквизитыТочкиИнтеграции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекТочкаИнтеграции.ТочкаИнтеграции, "ИнформационнаяСистемаТИ, РесурсСистемы");
		
		Если ЗначениеЗаполнено(РеквизитыТочкиИнтеграции.РесурсСистемы)
			И Контейнеры.Получить(РеквизитыТочкиИнтеграции.РесурсСистемы) = Неопределено Тогда
			// Заполнение для ресурса.
			ДополнительныеПараметры = ДополнительныеПараметрыДляЗаполненияИС();
			ДополнительныеПараметры.ЭтоРесурс = Истина;
			ДополнительныеПараметры.РесурсСистемы = РеквизитыТочкиИнтеграции.РесурсСистемы;
			ПараметрыИнформационнойСистемы = ЗаполнитьПараметрыИСДляДиаграммы(РеквизитыТочкиИнтеграции.ИнформационнаяСистемаТИ,
					ДополнительныеПараметры);
			Контейнеры.Вставить(РеквизитыТочкиИнтеграции.РесурсСистемы, ПараметрыИнформационнойСистемы);
			
		ИначеЕсли Контейнеры.Получить(РеквизитыТочкиИнтеграции.ИнформационнаяСистемаТИ) = Неопределено Тогда
			// Заполнение дополнительных информационных систем.
			ПараметрыИнформационнойСистемы = ЗаполнитьПараметрыИСДляДиаграммы(РеквизитыТочкиИнтеграции.ИнформационнаяСистемаТИ);
			Контейнеры.Вставить(РеквизитыТочкиИнтеграции.ИнформационнаяСистемаТИ, ПараметрыИнформационнойСистемы);
			
		Иначе
			// без обработки
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Контейнеры;
	
КонецФункции

// Заполнение исходного кода блоков
//
// Параметры:
//  Контейнеры		 - Соответствие - см. СформироватьИсходныйКодДиаграммы()
//	ПараметрыДляИсходногоКодаБлока - Структура - содержит свойства:
//  	* ПриемникЭтоВнешнийСервис				 - Булево
//  	* ЕстьВнешнийСервисИсточникИлиПриемника	 - Булево
//		* ОднаИнтеграцияНаДиаграмме - Булево - Истина, если только одна интеграция
//		* МассивИнтеграций - Массив Из СправочникСсылка.Интеграции - содержит список интеграций по которым формируется диаграмма
//
// Возвращаемое значение:
//  Строка - исходный код блоков
//
Функция ЗаполнениеИсходногоКодаБлоков(Контейнеры, ПараметрыДляИсходногоКодаБлока)
	
	ПриемникЭтоВнешнийСервис = ПараметрыДляИсходногоКодаБлока.ПриемникЭтоВнешнийСервис;
	ЕстьВнешнийСервисИсточникИлиПриемника = ПараметрыДляИсходногоКодаБлока.ЕстьВнешнийСервисИсточникИлиПриемника;
	
	ИсходныйКодБлоков = "";
	ИсходныйКодБлоковВнешнихСервисов = "";
	ПромежуточныйКодБлоков = "";
	ОсновнаяСистемаИСДляВыравнивания = Справочники.ИнформационныеСистемы.ПустаяСсылка();
	Для Каждого ТекКонтейнер Из Контейнеры Цикл
		
		ПараметрыЗаполнения = ЗаполнениеБлокаСистемыСКонтейнерами(ТекКонтейнер, Контейнеры);
		ПромежуточныйКодБлоков = ПараметрыЗаполнения.КодБлокаДляДиаграммы;
		ОсновнаяСистемаИСДляВыравнивания = ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ОсновнаяСистемаИСДляВыравнивания),
				ПараметрыЗаполнения.ОсновнаяСистемаИСДляВыравнивания, ОсновнаяСистемаИСДляВыравнивания);
		
		Если ЕстьВнешнийСервисИсточникИлиПриемника
			И ТекКонтейнер.Значение.ЭтоВнешнийСервис Тогда
			ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(ИсходныйКодБлоковВнешнихСервисов, ПромежуточныйКодБлоков, Символы.ПС);
		Иначе
			ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(ИсходныйКодБлоков, ПромежуточныйКодБлоков, Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
	
	// BSLLS:SpaceAtStartComment-off
	//Если ЗначениеЗаполнено(ОсновнаяСистемаИСДляВыравнивания)
	//	И ПараметрыДляИсходногоКодаБлока.ОднаИнтеграцияНаДиаграмме Тогда
	//	// Выравнивание по основной системе.
	//	ПервыйЭлементИнтеграций = ПараметрыДляИсходногоКодаБлока.МассивИнтеграций[0];
	//	ДругаяСистема = ?(ПервыйЭлементИнтеграций.Приемник = ОсновнаяСистемаИСДляВыравнивания, ПервыйЭлементИнтеграций.Источник, ПервыйЭлементИнтеграций.Приемник);
	//
	//	ИсходныйКодБлоков = СтрШаблон(НСтр("ru = '%1
	//                                        |Lay_D(sys%2, %3)'"), ИсходныйКодБлоков, ОсновнаяСистемаИСДляВыравнивания.Код, ДругаяСистема.Код);
	//КонецЕсли;
	// BSLLS:SpaceAtStartComment-on
	
	КонтейнерПерсона = НСтр("ru = 'Person(user, ""User"", ""People that need products"", $sprite=""users"")'");
	
	Если ЕстьВнешнийСервисИсточникИлиПриемника Тогда
		
		// Person(user, ""User"", ""People that need products"", $sprite=""users"")
		СтрокаПараметровКода = НСтр("ru = '%1
				|%2 '");
		Если ПриемникЭтоВнешнийСервис Тогда
			ИсходныйКодБлоковВнешнихСервисов = СтрШаблон(СтрокаПараметровКода, КонтейнерПерсона, ИсходныйКодБлоковВнешнихСервисов);
		Иначе
			ИсходныйКодБлоков = СтрШаблон(СтрокаПараметровКода, КонтейнерПерсона, ИсходныйКодБлоков);
		КонецЕсли;
		
		ОсновнаяОрганизация = Константы.ТИ_ОсновнаяОрганизация.Получить();
		ИсходныйКодБлоков = СтрШаблон(НСтр("ru = '%1
					|Boundary(c1, %3, ""Периметр компании""){ 
					|%2
					|}'"),
				ИсходныйКодБлоковВнешнихСервисов,
				ИсходныйКодБлоков,
				ОсновнаяОрганизация);
		
	Иначе
		
		ИсходныйКодБлоков = СтрШаблон(НСтр("ru = '%1
					|%2 '"), КонтейнерПерсона, ИсходныйКодБлоков);
		
	КонецЕсли;
	
	Возврат ИсходныйКодБлоков;
	
КонецФункции // ЗаполнениеИсходногоКодаБлока()

// Заполнение исходного кода связей блоков
//
// Параметры:
//  Контейнеры		 - Соответствие - см. СформироватьИсходныйКодДиаграммы()
//  МассивИнтеграций - Массив
//
// Возвращаемое значение:
//  Строка - исходный код соединений
//
Функция ЗаполнениеИсходногоКодаСвязейБлоков(Контейнеры, МассивИнтеграций, БазовыйКод)
	
	НомерИнтеграции = 0;
	ИсходныйКодСоединений = "";
	КолВоИнтеграций = МассивИнтеграций.Количество();
    СтрокиТеговСвязей = "";
	
	// - Подготовка данных для вывода соеденений.
	КолонкиДляПроверкиНаДубли = "ИнициаторОбмена, НаправлениеПотокаДанных, МетодВызова, ТочкаИнтеграции, Описание";
	ТаблицаДобавленныхУникальныхТочекИнтеграции = Справочники.Интеграции.СоздатьЭлемент().СписокТочекИнтеграции.Выгрузить( ,
			КолонкиДляПроверкиНаДубли);
	
	ТаблицаДобавленныхУникальныхТочекИнтеграции.Колонки.Добавить("НомерИнтеграции", Новый ОписаниеТипов("Число"));
	ТаблицаДобавленныхУникальныхТочекИнтеграции.Колонки.Добавить("ИндексСтрока", Новый ОписаниеТипов("Строка"));
	ТаблицаДобавленныхУникальныхТочекИнтеграции.Колонки.Добавить("КодУникальности", Новый ОписаниеТипов("Строка"));
	КолонкиДляПроверкиНаДубли = КолонкиДляПроверкиНаДубли + ", КодУникальности";
	
	Для Каждого ТекПараметрыИнтеграции Из МассивИнтеграций Цикл
		
		НомерИнтеграции = НомерИнтеграции + 1;
		
		// Формирование легенды с тегами.
		СтрокаТегаСвязи = НСтр("ru = 'AddRelTag(""int_%1"", $textColor=""%2"", $lineColor=""%2"",%3 $legendText=""%4"")'");		
		
		НаименованиеБезКавычек = УбратьКавычкиИзСтроки(ТекПараметрыИнтеграции.Ссылка);
		Если ЗначениеЗаполнено(ТекПараметрыИнтеграции.ДействияПоАР) Тогда
			ЖирныеЛинии = "$lineStyle = BoldLine(), ";
			ЦветСвязи = "#FF0033"; // красный цвет
			НаименованиеБезКавычек = СтрШаблон(НСтр("ru = '%1 - %2'"), ТекПараметрыИнтеграции.ДействияПоАР, НаименованиеБезКавычек);
		Иначе	
			ЖирныеЛинии = "";
			ЦветСвязи = ОпределитьЦветСвязиПоНомеруИнтеграции(НомерИнтеграции); // Пример: #b7410e
		КонецЕсли;
		
		ТекстЛегендыСвязи = СтрШаблон(НСтр("ru = '%1: %2'"), НомерИнтеграции, НаименованиеБезКавычек);
		
		СтрокаТегаСвязи = СтрШаблон(СтрокаТегаСвязи, 
		    НомерИнтеграции, // 1
			ЦветСвязи,		 // 2
			ЖирныеЛинии,     // 3
			ТекстЛегендыСвязи); // 4
			
		ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(СтрокиТеговСвязей, СтрокаТегаСвязи, Символы.ПС);
		
		// Точки интеграции
		СписокТочекИнтеграции = ТекПараметрыИнтеграции.СписокТочекИнтеграции;
		КоличествоТочекИнтеграции = СписокТочекИнтеграции.Количество();
		
		Индекс = 0;
		// Подготовка таблицы ТаблицаДобавленныхУникальныхТочекИнтеграции для формирования исходного кода соединений.
		Для Каждого ТекТочкаИнтеграции Из СписокТочекИнтеграции Цикл
			
			ТаблицаДляПроверкиДублей = ТаблицаДобавленныхУникальныхТочекИнтеграции.Скопировать();
			НовСтрокаДобавленных = ТаблицаДляПроверкиДублей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаДобавленных, ТекТочкаИнтеграции);
			
			НовСтрокаДобавленных.НомерИнтеграции = НомерИнтеграции;
			
			индекс = индекс + 1;
			СтрокаИндексаНовая = СтрШаблон(НСтр("ru = '[%1-%2]'"), НомерИнтеграции, индекс);
			НовСтрокаДобавленных.ИндексСтрока = СтрокаИндексаНовая;
			
			ДублированныеСтроки = Новый Массив;
			Если ТИ_ОбщегоНазначения.ПроверитьДублированиеСтрокТаблицы(ТаблицаДляПроверкиДублей, КолонкиДляПроверкиНаДубли, ДублированныеСтроки) Тогда
				
				Если КоличествоТочекИнтеграции = 1 Тогда
					// Отметить, как уникальную, чтобы не ловилась при последующей проверке на дубли.
					ДублированныеСтроки[1].КодУникальности = Строка(Новый УникальныйИдентификатор());
				Иначе
					ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(ДублированныеСтроки[0].ИндексСтрока, СтрокаИндексаНовая, "");
					ТаблицаДляПроверкиДублей.Удалить(ДублированныеСтроки[1]);
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаДобавленныхУникальныхТочекИнтеграции = ТаблицаДляПроверкиДублей;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполнение тегов со связями.
	БазовыйКод = СтрЗаменить(БазовыйКод, НСтр("ru = ''' #ЗаполнениеТеговСвязей#'"), СтрокиТеговСвязей);
	
	
	// - Заполнение исходного кода соединений.
	КоличествоТочекИнтеграцииДляВывода = ТаблицаДобавленныхУникальныхТочекИнтеграции.Количество();
	Для Каждого ТекТочкаИнтеграции Из ТаблицаДобавленныхУникальныхТочекИнтеграции Цикл
		
		индекс = индекс + 1;
		ЭтоПоследняяВСпискеТочка = КоличествоТочекИнтеграцииДляВывода = Индекс И КолВоИнтеграций = 1;
		
		ИсходныйКодСоединений = ЗаполнениеИсходногоКодаБлокаПоТочкеИнтеграции(Контейнеры, ТекТочкаИнтеграции, КолВоИнтеграций,
				ТекТочкаИнтеграции.НомерИнтеграции, ТекТочкаИнтеграции.ИндексСтрока, ЭтоПоследняяВСпискеТочка, ИсходныйКодСоединений);
		
	КонецЦикла;
	
	Возврат ИсходныйКодСоединений;
	
КонецФункции

Функция ЗаполнениеИсходногоКодаБлокаПоТочкеИнтеграции(Контейнеры, ТекТочкаИнтеграции, КолВоИнтеграций, НомерИнтеграции,
		СтрокаИндекс, ЭтоПоследняяВСпискеТочка, ИсходныйКодСоединений)
	
	РеквизитыТочкиИнтеграции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекТочкаИнтеграции.ТочкаИнтеграции,
			"КраткоеНаименование, ИнформационнаяСистемаТИ, ТипИнтеграции, ТипДанныхОбмена, РесурсСистемы");
	
	Первый = Контейнеры.Получить(ТекТочкаИнтеграции.ИнициаторОбмена);
	
	Если ЗначениеЗаполнено(РеквизитыТочкиИнтеграции.РесурсСистемы) Тогда
		Второй = Контейнеры.Получить(РеквизитыТочкиИнтеграции.РесурсСистемы);
	Иначе
		Второй = Контейнеры.Получить(РеквизитыТочкиИнтеграции.ИнформационнаяСистемаТИ);
	КонецЕсли;
	
	// Направление потока и метод вызова.
	НаправлениеПотока = "";
	Если ТекТочкаИнтеграции.НаправлениеПотокаДанных = Перечисления.НаправленияПотокаДанных.ОтИнициатора Тогда
		НаправлениеПотока = "Выгрузка";	
	ИначеЕсли ТекТочкаИнтеграции.НаправлениеПотокаДанных = Перечисления.НаправленияПотокаДанных.КИнициатору Тогда
		НаправлениеПотока = "Загрузка";	
	Иначе
		НаправлениеПотока = "Выгрузка и загрузка";			
	КонецЕсли;
	НаправлениеПотокаИМетодВызова = СтрШаблон(НСтр("ru = '%1 - %2'"), НаправлениеПотока, ТекТочкаИнтеграции.МетодВызова);	
	
	// Тег ext - выделяется красным цветом с картинкой кирпичной стены.
	ТегСоединения = "";
	Если Первый.ЭтоВнешнийСервис
		ИЛИ Второй.ЭтоВнешнийСервис Тогда
		
		ДанныеПоТегу = ?(КолВоИнтеграций = 1,
				"ext",
				СтрШаблон(НСтр("ru = 'int_%1+ext'"), НомерИнтеграции));
		
		ТегСоединения = СтрШаблон(НСтр("ru = '$tags=""%1""'"), ДанныеПоТегу);
		
	ИначеЕсли НомерИнтеграции <= 50 Тогда
		ТегСоединения = СтрШаблон(НСтр("ru = '$tags=""int_%1""'"), НомерИнтеграции);
	Иначе
		ТегСоединения = "";
	КонецЕсли;
	
	Описание = УбратьКавычкиИзСтроки(ТекТочкаИнтеграции.Описание);
	Если  ЗначениеЗаполнено(ТекТочкаИнтеграции.Описание) Тогда
		ПолноеОписание = СтрШаблон(НСтр("ru = '%1 (%2)'"), РеквизитыТочкиИнтеграции.КраткоеНаименование, Описание);
	Иначе
		ПолноеОписание = РеквизитыТочкиИнтеграции.КраткоеНаименование;	
	КонецЕсли;
	
	ПромежуточныйКодСоединений = СтрШаблон(НСтр("ru = '
				|Rel%5(%1, %2, ""%7. %4"", ""%3 - %6"", ""%9"", %8)'"),
			Первый.Параметр1, // 1
			Второй.Параметр1, // 2
			РеквизитыТочкиИнтеграции.ТипИнтеграции, // 3
			НаправлениеПотокаИМетодВызова, // 4
			?(Первый.ЭтоПриемник И ЭтоПоследняяВСпискеТочка, "_L", ""), // 5 устанавливаем расположение приемника справа: это приемник и он последний в списке
			РеквизитыТочкиИнтеграции.ТипДанныхОбмена, // 6
			СтрокаИндекс, // 7
			ТегСоединения, // 8
			ПолноеОписание); // 9
				
	Если СтрНайти(ИсходныйКодСоединений, ПромежуточныйКодСоединений) = 0 Тогда
		
		ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(ИсходныйКодСоединений, ПромежуточныйКодСоединений, Символы.ПС);
		
	КонецЕсли;
	
	Возврат ИсходныйКодСоединений;
	
КонецФункции // ЗаполнениеИсходногоКодаБлокПоТочкеИнтеграции()

// Возвращает соответствие типа контейнера для диаграммы по умолчанию
//
//
// Возвращаемое значение:
//   Соответствие - содержит данные по архитектуре с параметром выводимой картинки:
//		* Ключ - Перечисления.АрхитектурыРаботыИС
//		* Значение - Структура:
//			** Параметр4 - Строка - картинки devicons можно взять отсюда: http://vorillaz.github.io/devicons .
//									Не забыть добавить строку в ШаблонБазовогоИсходногоКода()
//			** ИмяПроцедуры - Строка - Контейнер: Container, ContainerDB, Container_Ext, System_Ext, ContainerQueue, Person .
//													См. параметры https://github.com/plantuml-stdlib/C4-PlantUML
//
Функция СоответствиеТипаКонтейнераДляДиаграммыПоУмолчанию()
	
	НаборДанных = Новый Соответствие;
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("streamline", "ContainerDb");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.ФайловыйСервер, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("msql_server", "ContainerDb");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.СерверБазДанных, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("android");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.МобильноеПриложение, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("prolog", "System_Ext");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.ВнешнийСервис, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("ie");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.ВебСервер, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("terminal");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.КонсольноеПриложение, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("scala", "ContainerQueue");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.ИнтеграционнаяШина, ПараметрыДляВставки);
	
	ПараметрыДляВставки = ПараметрыДляТипаКонтейнера("d");
	НаборДанных.Вставить(Перечисления.АрхитектурыРаботыИС.БизнесДомен, ПараметрыДляВставки);
	
	Возврат НаборДанных;
	
КонецФункции

Функция ПараметрыДляТипаКонтейнера(Параметр4, ИмяПроцедуры = "")
	
	Если ИмяПроцедуры = "" Тогда
		ИмяПроцедуры = "Container";
	КонецЕсли;
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Параметр4", Параметр4);
	ПараметрыДанных.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	
	Возврат ПараметрыДанных;
	
КонецФункции

Функция ОсновнойРесурсИнформационнойСистемы(ИнформационнаяСистема)
	
	РеквизитыРесурсаИС = Новый Структура;
	РеквизитыРесурсаИС.Вставить("РесурсИнформационнойСистемы", Справочники.РесурсыИнформационныхСистем.ПустаяСсылка());
	РеквизитыРесурсаИС.Вставить("ПутьКРесурсу", "");
	РеквизитыРесурсаИС.Вставить("СерверРесурсов", Справочники.СерверыРесурсов.ПустаяСсылка());
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформационныеСистемыРесурсы.Ссылка КАК Ссылка,
		|	ИнформационныеСистемыРесурсы.РесурсИнформационнойСистемы КАК РесурсИнформационнойСистемы,
		|	ИнформационныеСистемыРесурсы.РесурсИнформационнойСистемы.ПутьКРесурсу КАК ПутьКРесурсу,
		|	ИнформационныеСистемыРесурсы.РесурсИнформационнойСистемы.СерверРесурсов КАК СерверРесурсов
		|ИЗ
		|	Справочник.ИнформационныеСистемы.Ресурсы КАК ИнформационныеСистемыРесурсы
		|ГДЕ
		|	ИнформационныеСистемыРесурсы.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформационныеСистемыРесурсы.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ИнформационнаяСистема);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(РеквизитыРесурсаИС, Выборка);
		
	КонецЕсли;
	
	
	Возврат РеквизитыРесурсаИС;
	
КонецФункции

Функция ЗаполнениеБлокаСистемыСКонтейнерами(ТекКонтейнер, Контейнеры)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КодБлокаДляДиаграммы", "");
	ПараметрыЗаполнения.Вставить("ОсновнаяСистемаИСДляВыравнивания", Справочники.ИнформационныеСистемы.ПустаяСсылка());
	
	
	Если ТекКонтейнер.Значение.ЭтоРесурс Тогда
		Возврат ПараметрыЗаполнения;
	КонецЕсли;
	
	// Определение всех ресурсов используемых для системы.
	ИспользуемыеСистемойРесурсы = Новый Массив;
	Для Каждого ТекРесурс Из Контейнеры Цикл
		Если НЕ ТекРесурс.Значение.ЭтоРесурс Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекРесурс.Значение.ИнформационнаяСистемаРесурса <> ТекКонтейнер.Ключ Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемыеСистемойРесурсы.Добавить(ТекРесурс.Ключ); // Ресурс, который используется в ИС
	КонецЦикла;
	
	КодБлокаДляДиаграммы = "";
	Если ИспользуемыеСистемойРесурсы.Количество() = 0 Тогда
		
		КодБлокаДляДиаграммы = ЗаполнениеБлокаОдногоКонтейнера(ТекКонтейнер.Значение);
		
	Иначе
		// Есть ресурсы, а значит формируем блок основной системы с используемыми для работы ресурсами
		
		КодКонтейнеровВнутриСистемы = ЗаполнениеБлокаОдногоКонтейнера(ТекКонтейнер.Значение); // основная система
		Для Каждого ТекРесурс Из ИспользуемыеСистемойРесурсы Цикл
			РесурсДляЗаполнения = Контейнеры.Получить(ТекРесурс);
			КодКонтейнераРесурса = ЗаполнениеБлокаОдногоКонтейнера(РесурсДляЗаполнения); // ресурс принадлежащий основной системе и учавствующий в интеграции
			ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(КодКонтейнеровВнутриСистемы, КодКонтейнераРесурса, Символы.ПС);
		КонецЦикла;
		
		СтруктураБлока = НСтр("ru = 'System_Boundary(sys%1, ""%2"") {
				|   %3
				|}'");
		
		КодБлокаДляДиаграммы = СтрШаблон(СтруктураБлока,
				ТекКонтейнер.Значение.Параметр1,
				ТекКонтейнер.Значение.Параметр2,
				КодКонтейнеровВнутриСистемы);
		
	КонецЕсли;
	
	// Добавление связи используемых ресурсов с основной системой.
	Для Каждого ТекРесурс Из ИспользуемыеСистемойРесурсы Цикл
		РесурсДляЗаполнения = Контейнеры.Получить(ТекРесурс);
		КодСвязиРесурсаИСистемы = СтрШаблон(НСтр("ru = 'Rel_L(%1, %2, ""uses"")'"), РесурсДляЗаполнения.Параметр1, ТекКонтейнер.Значение.Параметр1);
		ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(КодБлокаДляДиаграммы, КодСвязиРесурсаИСистемы, Символы.ПС);
		ПараметрыЗаполнения.ОсновнаяСистемаИСДляВыравнивания = РесурсДляЗаполнения.ИнформационнаяСистемаРесурса;
	КонецЦикла;
	
	ПараметрыЗаполнения.КодБлокаДляДиаграммы = КодБлокаДляДиаграммы;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция УбратьКавычкиИзСтроки(ВходнаяСтрока)
	
	РезультатСтрока = СтрЗаменить(Строка(ВходнаяСтрока), """", "");
	
	Возврат РезультатСтрока;
	
КонецФункции

Функция ОпределитьЦветСвязиПоНомеруИнтеграции(НомерИнтеграции)
	
	Если НомерИнтеграции = 0 Тогда
		НомерСтрокиЦвета = 1;
	Иначе
		НомерСтрокиЦвета = НомерИнтеграции;
	КонецЕсли;
	
	ЦветаИнтеграций = Справочники.Интеграции.ПолучитьМакет("ЦветаДляИнтеграций");
	
	Цвет = ЦветаИнтеграций.ПолучитьСтроку(НомерСтрокиЦвета);
	
	Возврат Цвет;

КонецФункции

#КонецОбласти

#Область ВспомогательныеФункцииДляГенерацииКодаДоменов

// Возвращается соответствия системы доменам
//
// Параметры:
//  Домены	 - ТаблицаЗначений - см. ТочкиИнтеграцииСервер.ДоменыОрганизации()
//
// Возвращаемое значение:
//   Соответствие - в разрезе систем:
//		* Ключ - СправочникСсылка.ИнформационныеСистемы
//		* Значение - Структура - содержит свойства:
//			** ТаблицаДоменов - ТаблицаЗначений - см. ТочкиИнтеграцииСервер.ДоменыОрганизации()
//			** ЭтоОсновнаяСистема - Булево - Истина, в случае если система содержит наибольшее кол-во доменов
//
Функция СформироватьСоответствияДоменовИС(Домены)
	
	СистемыСДоменами = Новый Соответствие;
	
	Для Каждого ТекДомен Из Домены Цикл
		
		ДанныеПоСистеме = СистемыСДоменами.Получить(ТекДомен.Владелец);
		Если НЕ ЗначениеЗаполнено(ДанныеПоСистеме) Тогда
			
			НоваяТаблица = ТекДомен.Владелец().СкопироватьКолонки();
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДомен);
			
			ДанныеДоменов = Новый Структура;
			ДанныеДоменов.Вставить("ТаблицаДоменов", НоваяТаблица);
			СистемыСДоменами.Вставить(ТекДомен.Владелец, ДанныеДоменов);
			ДанныеДоменов.Вставить("ЭтоОсновнаяСистема", Ложь);
		Иначе
			// если уже ранее добавлялся домен
			НоваяСтрока = ДанныеПоСистеме.ТаблицаДоменов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДомен);
		КонецЕсли;
		
	КонецЦикла;
	
	// Определение основной системы.
	ОсновнаяСистема = Справочники.ИнформационныеСистемы.ПустаяСсылка();
	МаксимумДоменов = 0;
	Для Каждого ТекСистема Из СистемыСДоменами Цикл
		КоличествоДоменовПоСистеме = ТекСистема.Значение.ТаблицаДоменов.Количество();
		Если КоличествоДоменовПоСистеме > МаксимумДоменов Тогда
			МаксимумДоменов = КоличествоДоменовПоСистеме;
			ОсновнаяСистема = ТекСистема.Ключ;
		КонецЕсли;
	КонецЦикла;
	ДанныеПоСистеме = СистемыСДоменами.Получить(ОсновнаяСистема);
	ДанныеПоСистеме.ЭтоОсновнаяСистема = Истина;
	
	Возврат СистемыСДоменами;
	
КонецФункции

// Возвращает код заполнения блока системы с бизнес доменами
//
// Параметры:
//  ИнформационнаяСистема	 - СправочникСсылка.ИнформационныеСистемы
//  ДанныеПоСистеме			 - Структура - см. СформироватьСоответствияДоменовИС()
//
// Возвращаемое значение:
//  Строка - код блока системы с бизнес-доменами в ней
//
Функция ЗаполнениеБлокаСистемыСБизнесДоменами(ИнформационнаяСистема, ДанныеПоСистеме)
	
	ПромежуточныйКодДомена = "";
	
	Для Каждого ТекСтрока Из ДанныеПоСистеме.ТаблицаДоменов Цикл
		
		ДополнительныеПараметры = ДополнительныеПараметрыДляЗаполненияИС();
		ДополнительныеПараметры.ЭтоБизнесДомен = Истина;
		ДополнительныеПараметры.БизнесДомен = ТекСтрока.БизнесДомен;
		ДополнительныеПараметры.КонтейнерИзменен = ТекСтрока.Изменяется;
		ДополнительныеПараметры.ОписаниеИзменения = ТекСтрока.ОписаниеИзменения;
		ПараметрыБизнесДомена = ЗаполнитьПараметрыИСДляДиаграммы(ИнформационнаяСистема, ДополнительныеПараметры);
		
		КодБлокаДляДиаграммы = ЗаполнениеБлокаОдногоКонтейнера(ПараметрыБизнесДомена);
		
		ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(ПромежуточныйКодДомена, КодБлокаДляДиаграммы, Символы.ПС);
		
	КонецЦикла;
	
	КодДиаграммыПоСистеме = "";
	
	Если ДанныеПоСистеме.ТаблицаДоменов.Количество() = 1 Тогда
		// Не группируем домены в систему, если только один домен в системе.
		
		КодДиаграммыПоСистеме = ПромежуточныйКодДомена;	
		
	Иначе	
		КодДиаграммыПоСистеме = НСтр("ru = 'System_Boundary(sys%1, ""%2"") {
                                      |   %3
                                      |}'");
		НаименованиеСистемыДляВывода = ТИ_ОбщегоНазначенияКлиентСервер.ИдентификаторДляФормул(ИнформационнаяСистема);
		КодДиаграммыПоСистеме = СтрШаблон(КодДиаграммыПоСистеме,
		НаименованиеСистемыДляВывода,
		ИнформационнаяСистема,
		ПромежуточныйКодДомена);
		
	КонецЕсли;
	
	Возврат КодДиаграммыПоСистеме;
	
КонецФункции

Функция ЗаполнениеКодаСвязейДоменов(ДокументАрхитектурноеРешение)
	
	КодСвязей = "";
	Для каждого ТекСтрока Из ДокументАрхитектурноеРешение.СвязиДоменов Цикл
		
		ДанныеПоТегуИзменения = ?(ЗначениеЗаполнено(ТекСтрока.Действия), НСтр("ru = ', $tags=""Изменение связей бизнес-доменов""'"), "");
		ОписаниеПотока = СтрШаблон(НСтр("ru = '%1. %2'"), ТекСтрока.НомерСтроки, ТекСтрока.ОписаниеПотока);
		
		ПромежуточныйКодСоединений = СтрШаблон(НСтр("ru = '
                                                     |Rel(%1, %2, ""%3"",""%4"",""%5""%6)'"),
			ТИ_ОбщегоНазначенияКлиентСервер.ИдентификаторДляФормул(ТекСтрока.Источник.Наименование),  // 1
			ТИ_ОбщегоНазначенияКлиентСервер.ИдентификаторДляФормул(ТекСтрока.Приемник.Наименование),  // 2
			ОписаниеПотока,                                                                     // 3
			"" + ТекСтрока.Действия,                                                                      // 4
			УбратьКавычкиИзСтроки(ТекСтрока.ОписаниеИзменения),                                                                  		  // 5
			ДанныеПоТегуИзменения);                                                                       // 6
		 
			
		ТИ_ОбщегоНазначенияКлиентСервер.ПрисоединитьСтроку(КодСвязей, ПромежуточныйКодСоединений, Символы.ПС);
	
	КонецЦикла;
	
	Возврат КодСвязей;

КонецФункции

#КонецОбласти

#КонецОбласти