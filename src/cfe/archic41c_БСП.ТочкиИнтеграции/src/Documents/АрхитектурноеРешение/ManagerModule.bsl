#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	Настройки.ПриДобавленииКомандПечати = Истина;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Архитектурное решение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.АрхитектурноеРешение";
	КомандаПечати.Идентификатор = "АрхитектурноеРешение";
	КомандаПечати.Представление = НСтр("ru = 'Архитектурное решение'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "АрхитектурноеРешение");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьАрхитектурноеРешение(МассивОбъектов, ОбъектыПечати);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Архитектурное решение'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.АрхитектурноеРешение.ПФ_MXL_АрхитектурноеРешение";
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьАрхитектурноеРешение(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_АрхитектурноеРешение";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АрхитектурноеРешение.ПФ_MXL_АрхитектурноеРешение");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АрхитектурноеРешение.Дата КАК Дата,
	|	АрхитектурноеРешение.Название КАК Название,
	|	АрхитектурноеРешение.Номер КАК Номер,
	|	АрхитектурноеРешение.Организация КАК Организация,
	|	АрхитектурноеРешение.Ответственный КАК Ответственный,
	|	АрхитектурноеРешение.Проблема КАК Проблема,
	|	АрхитектурноеРешение.Решение КАК Решение,
	|	АрхитектурноеРешение.Статус КАК Статус,
	|	АрхитектурноеРешение.Ссылка КАК Ссылка,
	|	АрхитектурноеРешение.ИзмененияДоменов.(
	|		НомерСтроки КАК НомерСтроки,
	|		БизнесДомен КАК БизнесДомен,
	|		ОписаниеИзменения КАК ОписаниеИзменения,
	|		БизнесДомен.Владелец КАК ИнформационнаяСистема
	|	) КАК ИзмененияДоменов,
	|	АрхитектурноеРешение.СвязиДоменов.(
	|		НомерСтроки КАК НомерСтроки,
	|		Источник КАК Источник,
	|		Приемник КАК Приемник,
	|		Действия КАК Действия,
	|		ОписаниеПотока КАК ОписаниеПотока,
	|		ОписаниеИзменения КАК ОписаниеИзменения,
	|		Приоритет КАК Приоритет
	|	) КАК СвязиДоменов,
	|	АрхитектурноеРешение.Интеграции.(
	|		НомерСтроки КАК НомерСтроки,
	|		Интеграция КАК Интеграция,
	|		Действия КАК Действия,
	|		ОписаниеИзменения КАК ОписаниеИзменения
	|	) КАК Интеграции
	|ИЗ
	|	Документ.АрхитектурноеРешение КАК АрхитектурноеРешение
	|ГДЕ
	|	АрхитектурноеРешение.Ссылка В(&Ссылки)";
	Запрос.Параметры.Вставить("Ссылки", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьИзмененияДоменовШапка = Макет.ПолучитьОбласть("ИзмененияДоменовШапка");
	ОбластьИзмененияДоменов = Макет.ПолучитьОбласть("ИзмененияДоменов");
	ОбластьСвязиДоменовШапка = Макет.ПолучитьОбласть("СвязиДоменовШапка");
	ОбластьСвязиДоменов = Макет.ПолучитьОбласть("СвязиДоменов");
	ОбластьИнтеграцииШапка = Макет.ПолучитьОбласть("ИнтеграцииШапка");
	ОбластьИнтеграции = Макет.ПолучитьОбласть("Интеграции");
	
	ОбластьСхемаБизнесДоменов = Макет.ПолучитьОбласть("ОбластьСхемаБизнесДоменов");
	ОбластьСхемыИнтеграции = Макет.ПолучитьОбласть("ОбластьСхемыИнтеграции");

	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заголовок
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Шапка
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.ДатаПечати = ТекущаяДатаСеанса();
		
		ТабличныйДокумент.Вывести(Шапка, Выборка.Уровень());
		
		ГенерацияUMLДиаграмм = Обработки.ГенерацияUMLДиаграмм.Создать();
		ПараметрыПоУмолчанию = ГенерацияUMLДиаграмм.ПараметрыПоУмолчанию();
		
		// Бизнес домены
		ВыборкаИзмененияДоменов = Выборка.ИзмененияДоменов.Выбрать();
		Если ВыборкаИзмененияДоменов.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьИзмененияДоменовШапка);
		КонецЕсли;
		Пока ВыборкаИзмененияДоменов.Следующий() Цикл
			ОбластьИзмененияДоменов.Параметры.Заполнить(ВыборкаИзмененияДоменов);
			ТабличныйДокумент.Вывести(ОбластьИзмененияДоменов, ВыборкаИзмененияДоменов.Уровень());
		КонецЦикла;
		
		// Связи бизнес-доменов
		ВыборкаСвязиДоменов = Выборка.СвязиДоменов.Выбрать();
		Если ВыборкаСвязиДоменов.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьСвязиДоменовШапка);
		КонецЕсли;
		Пока ВыборкаСвязиДоменов.Следующий() Цикл
			ОбластьСвязиДоменов.Параметры.Заполнить(ВыборкаСвязиДоменов);
			ТабличныйДокумент.Вывести(ОбластьСвязиДоменов, ВыборкаСвязиДоменов.Уровень());
		КонецЦикла;
		
		// Интеграции
		ВыборкаИнтеграции = Выборка.Интеграции.Выбрать();
		Если ВыборкаИнтеграции.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьИнтеграцииШапка);
		КонецЕсли;
		Пока ВыборкаИнтеграции.Следующий() Цикл
			ОбластьИнтеграции.Параметры.Заполнить(ВыборкаИнтеграции);
			ТабличныйДокумент.Вывести(ОбластьИнтеграции, ВыборкаИнтеграции.Уровень());
		КонецЦикла;
		
		// Схема бизнес процесса
		ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыБизнесДоменов(Выборка.Ссылка);
		
		Результат = ГенерацияUMLДиаграмм.СгенерированноеИзображение(ИсходныйКод, ПараметрыПоУмолчанию);
		ВывестиСхемуВОбласти(ТабличныйДокумент, ОбластьСхемаБизнесДоменов, "СхемаБизнесДоменов", Результат);
		
		// Схема интеграций
		ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения(Выборка.Ссылка);
		
		Результат = ГенерацияUMLДиаграмм.СгенерированноеИзображение(ИсходныйКод, ПараметрыПоУмолчанию);
		ВывестиСхемуВОбласти(ТабличныйДокумент, ОбластьСхемыИнтеграции, "СхемаИнтеграции", Результат);
		
		// Подвал
		Подвал.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(Подвал);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерПервойСтроки, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиСхемуВОбласти(ТабличныйДокумент, Область, ИмяРисунка, РезультатГенерацииСхемы)
	
	Если ЗначениеЗаполнено(РезультатГенерацииСхемы.АдресИзображения) Тогда
		ДвоичныеДанныеСхемы = ПолучитьИзВременногоХранилища(РезультатГенерацииСхемы.АдресИзображения);
		
		Область.Рисунки[ИмяРисунка].Картинка = Новый Картинка(ДвоичныеДанныеСхемы);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(Область);
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#КонецЕсли