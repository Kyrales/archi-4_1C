
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтотОбъект.ЭтоНовый = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	УстановитьНастройкиОтображенияФормы();
	
	ЭтотОбъект.ИзмененоПотоковМеждуДоменами = КоличествоИзмененийПотоковМеждуДоменами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Изменяется", Истина);
	ТаблицаРезультат = БизнесДомены.Выгрузить(ПараметрыОтбора, "БизнесДомен, ОписаниеИзменения");		
	ТекущийОбъект.ИзмененияДоменов.Загрузить(ТаблицаРезультат);
	
	БизнесДомены.Сортировать("Изменяется УБЫВ");

	ЭтотОбъект.ИзмененоПотоковМеждуДоменами = КоличествоИзмененийПотоковМеждуДоменами();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьНастройкиТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЭтотОбъект.ЭтоНовый = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьНастройкиОтображенияФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБизнесДомены

&НаКлиенте
Процедура БизнесДоменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = "БизнесДоменыБизнесДомен" 
			Или Поле.Имя = "БизнесДоменыБизнесДоменСтатусЗапуска")
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.БизнесДомен) Тогда
       	ПоказатьЗначение(, Элемент.ТекущиеДанные.БизнесДомен); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесДоменыИзменяетсяПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесДоменыОписаниеПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязиДоменов

&НаКлиенте
Процедура СвязиДоменовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СвязиДоменов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НовоеИзмененное = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязиДоменовНаСервере()
	
	ТаблицаРезультат = ТочкиИнтеграцииСервер.СвязиДоменовПоОрганизации(Объект.Дата - 1, Объект.Организация);
	ТаблицаРезультат.Колонки.Удалить("ОписаниеИзменения");
	ТаблицаРезультат.Колонки.Удалить("Действия");
	
	Объект.СвязиДоменов.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязиДоменов(Команда)
	ЗаполнитьСвязиДоменовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиДоменовНаСервере()
	
	ТаблицаРезультат = ТочкиИнтеграцииСервер.СвязиДоменовПоОрганизации(Объект.Дата - 1, Объект.Организация);
	
	Для каждого ТекСтрока Из ТаблицаРезультат Цикл
	
		ТекСтрока.ОписаниеИзменения = ""; // прошлое описание изменения не нужно выводить
		ТекСтрока.Действия = "";
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Источник", ТекСтрока.Источник);
		ПараметрыОтбора.Вставить("Приемник", ТекСтрока.Приемник);
		НайденныеСтроки = Объект.СвязиДоменов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0
			И ЗначениеЗаполнено(НайденныеСтроки[0].Действия) Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЦикла;	
	
	Объект.СвязиДоменов.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязиДоменов(Команда)
	ОбновитьСвязиДоменовНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГенерацияСхемыБизнесДоменов(Команда)
	
	Если ЭтоНовый 
		Или Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перед генерацией схемы необходимо сохранить документ.'"));
		Возврат;
	КонецЕсли;
	
	ИсходныйКод = ГенерацияСхемыБизнесДоменовНаСервере(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("ИсходныйКод, СразуСформировать", ИсходныйКод, Истина);
	
	ОткрытьФорму("Обработка.ГенерацияUMLДиаграмм.Форма.Форма", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ГенерацияСхемыБизнесДоменовНаСервере(СсылкаНаДокумент)
	
	ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыБизнесДоменов(СсылкаНаДокумент);
	
	Возврат ИсходныйКод;
	
КонецФункции

&НаКлиенте
Процедура ГенерацияСхемыИнтеграций(Команда)
	
	Если ЭтоНовый 
		Или Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перед генерацией схемы необходимо сохранить документ.'"));
		Возврат;
	КонецЕсли;
	
	ИсходныйКод = ГенерацияСхемыИнтеграцийC4НаСервере(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("ИсходныйКод, СразуСформировать", ИсходныйКод, Истина);
	
	ОткрытьФорму("Обработка.ГенерацияUMLДиаграмм.Форма.Форма", ПараметрыФормы, ЭтотОбъект);

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГенерацияСхемыИнтеграцийC4НаСервере(СсылкаНаДокумент)
		
	ИсходныйКод = ТочкиИнтеграцииМоделиС4.СформироватьКодДиаграммыИнтеграцииПоАрхитектуреРешения(СсылкаНаДокумент);
	
	Возврат ИсходныйКод;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоСистемамИзБизнесДоменовНаСервере()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ВложенныйЗапрос.ИнформационнаяСистема КАК ИнформационнаяСистема
	                |ПОМЕСТИТЬ ВТ_ИнформационныеСистемы
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		АрхитектурноеРешениеСвязиДоменов.Источник.Владелец КАК ИнформационнаяСистема
	                |	ИЗ
	                |		Документ.АрхитектурноеРешение.СвязиДоменов КАК АрхитектурноеРешениеСвязиДоменов
	                |	ГДЕ
	                |		АрхитектурноеРешениеСвязиДоменов.Ссылка = &Ссылка
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		АрхитектурноеРешениеСвязиДоменов.Приемник.Владелец
	                |	ИЗ
	                |		Документ.АрхитектурноеРешение.СвязиДоменов КАК АрхитектурноеРешениеСвязиДоменов
	                |	ГДЕ
	                |		АрхитектурноеРешениеСвязиДоменов.Ссылка = &Ссылка
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		АрхитектурноеРешениеИзмененияДоменов.БизнесДомен.Владелец
	                |	ИЗ
	                |		Документ.АрхитектурноеРешение.ИзмененияДоменов КАК АрхитектурноеРешениеИзмененияДоменов
	                |	ГДЕ
	                |		АрхитектурноеРешениеИзмененияДоменов.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВложенныйЗапрос.ИнформационнаяСистема
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВложенныйЗапрос.Интеграция КАК Интеграция
	                |ПОМЕСТИТЬ ВТ_ИнтеграцииПоСистемам
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		Интеграции.Ссылка КАК Интеграция
	                |	ИЗ
	                |		Справочник.Интеграции КАК Интеграции
	                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнформационныеСистемы КАК ВТ_ИнформационныеСистемы
	                |			ПО Интеграции.Источник = ВТ_ИнформационныеСистемы.ИнформационнаяСистема
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		Интеграции.Ссылка
	                |	ИЗ
	                |		Справочник.Интеграции КАК Интеграции
	                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнформационныеСистемы КАК ВТ_ИнформационныеСистемы
	                |			ПО Интеграции.Источник = ВТ_ИнформационныеСистемы.ИнформационнаяСистема) КАК ВложенныйЗапрос
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВложенныйЗапрос.Интеграция
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ИнтеграцииПоСистемам.Интеграция КАК Интеграция
	                |ИЗ
	                |	ВТ_ИнтеграцииПоСистемам КАК ВТ_ИнтеграцииПоСистемам
	                |ГДЕ
	                |	НЕ ВТ_ИнтеграцииПоСистемам.Интеграция.ПометкаУдаления
	                |	И НЕ ВТ_ИнтеграцииПоСистемам.Интеграция.СтатусИнтеграции В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнтеграции.Выключена), ЗНАЧЕНИЕ(Перечисление.СтатусыИнтеграции.Неактуальна))";
					
	 
	 Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТаблицаРезультата = Результат.Выгрузить();
	 
	 Объект.Интеграции.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСистемамИзБизнесДоменов(Команда)
	
	ЗаполнитьПоСистемамИзБизнесДоменовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСистемамИсточникПриемникНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.СистемаИсточник КАК СистемаИсточник,
	               |	ВложенныйЗапрос.СистемаПриемник КАК СистемаПриемник
	               |ПОМЕСТИТЬ ВТ_СистемыИсточникПриемник
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		АрхитектурноеРешениеСвязиДоменов.Источник.Владелец КАК СистемаИсточник,
	               |		АрхитектурноеРешениеСвязиДоменов.Приемник.Владелец КАК СистемаПриемник
	               |	ИЗ
	               |		Документ.АрхитектурноеРешение.СвязиДоменов КАК АрхитектурноеРешениеСвязиДоменов
	               |	ГДЕ
	               |		АрхитектурноеРешениеСвязиДоменов.Ссылка = &Ссылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АрхитектурноеРешениеСвязиДоменов.Приемник.Владелец,
	               |		АрхитектурноеРешениеСвязиДоменов.Источник.Владелец
	               |	ИЗ
	               |		Документ.АрхитектурноеРешение.СвязиДоменов КАК АрхитектурноеРешениеСвязиДоменов
	               |	ГДЕ
	               |		АрхитектурноеРешениеСвязиДоменов.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	               |ГДЕ
	               |	ВложенныйЗапрос.СистемаИсточник <> ВложенныйЗапрос.СистемаПриемник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.СистемаИсточник,
	               |	ВложенныйЗапрос.СистемаПриемник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Интеграции.Ссылка КАК Интеграция
	               |ИЗ
	               |	ВТ_СистемыИсточникПриемник КАК ВТ_СистемыИсточникПриемник
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Интеграции КАК Интеграции
	               |		ПО ВТ_СистемыИсточникПриемник.СистемаИсточник = Интеграции.Источник
	               |			И ВТ_СистемыИсточникПриемник.СистемаПриемник = Интеграции.Приемник
	               |ГДЕ
	               |	НЕ Интеграции.ПометкаУдаления
	               |	И НЕ Интеграции.СтатусИнтеграции В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнтеграции.Выключена), ЗНАЧЕНИЕ(Перечисление.СтатусыИнтеграции.Неактуальна))";
	
	 Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТаблицаРезультата = Результат.Выгрузить();
	 
	 Объект.Интеграции.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоСистемамИсточникПриемник(Команда)
	
	ЗаполнитьПоСистемамИсточникПриемникНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьНастройкиОтображенияФормы()

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТаблицаРезультат = ТочкиИнтеграцииСервер.ДоменыОрганизации(Объект.Организация, Объект.Ссылка);
		БизнесДомены.Загрузить(ТаблицаРезультат);
		
	КонецЕсли;	
	
	УстановитьНастройкиТабличныхЧастей();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьНастройкиТабличныхЧастей()

	Для каждого ТекСтрока Из Объект.СвязиДоменов Цикл
		
		СистемаИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Источник , "Владелец");
		СистемаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Приемник , "Владелец");
		
		ТекСтрока.ВзаимодействиеВнутриСистемы = СистемаИсточник = СистемаПриемник;
		
	КонецЦикла;

КонецПроцедуры 


// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры 

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Функция КоличествоИзмененийПотоковМеждуДоменами()
	
	Счет = 0;
	Для каждого ТекСтрока Из Объект.СвязиДоменов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Действия) Тогда
			Счет = Счет + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Счет;

КонецФункции

#КонецОбласти